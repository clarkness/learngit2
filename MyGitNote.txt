一、安装git
1、 检测是否安装git
$ git
2、 linux ubantu 安装
$ sudo apt-get install git
3、 安装完成后进行设置?? ??--global参数表示你这台机器上所有的Git仓库都会使用这个配置
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
二、创建版本库
1、 创建目录
$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit
2、创建Git可以管理的仓库
$ git init
Initialized empty Git repository in /Users/michael/learngit/.git/
当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的
所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化
Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的
3、将文件放进Git仓库
$ git add readme.txt ? ?# 把文件的修改放到暂存区stage
$ git commit -m "wrote a readme file" ? ?# 把暂存区文件的修改提交到当前分支，并记录commit信息
[master (root-commit) cb926e7] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 100644 readme.txt


三、常用操作命令
1、查看仓库状态
$ git status
# On branch master
# Changes not staged for commit:
# ? (use "git add <file>..." to update what will be committed)
# ? (use "git checkout -- <file>..." to discard changes in working directory)
#
# ?  modified: ? readme.txt
#
no changes added to commit (use "git add" and/or "git commit -a")
2、查看文件作哪些修改
$ git diff readme.txt ? ? # 查看尚未暂存的文件更新了哪些部分
diff --git a/readme.txt b/readme.txt
index 46d49bf..9247db6 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1,2 +1,2 @@
-Git is a version control system.
+Git is a distributed version control system.
 Git is free software.
3、查看commit日志
$ git log ? ?# 显示从最近到最远的提交日志
commit 3628164fb26d48395383f8f31179f24e0882e1e0
Author: Michael Liao <askxuefeng@gmail.com>
Date: ? Tue Aug 20 15:11:49 2013 +0800
?
 ?  append GPL
?
commit ea34578d5496d7dd233c827ed32a8cd576c5ee85
Author: Michael Liao <askxuefeng@gmail.com>
Date: ? Tue Aug 20 14:53:12 2013 +0800
?
 ?  add distributed
加上--pretty=oneline参数，把所有信息放在一行
4、版本回退
$ git reset --hard HEAD^ ? ?# 返回到上一个版本
HEAD is now at ea34578 add distributed
HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
$ git reset --hard 3628164 ? ?# 回退到特定版本，笨笨好不需要写全
HEAD is now at 3628164 append GPL
5、GIt命令记录日志
$ git reflog
ea34578 HEAD@{0}: reset: moving to HEAD^
3628164 HEAD@{1}: commit: append GPL
ea34578 HEAD@{2}: commit: add distributed
cb926e7 HEAD@{3}: commit (initial): wrote a readme file
6、撤销修改
$ git checkout -- readme.txt ? ?# 丢弃工作区的修改，再放入暂存区或者最新提交版本的状态
这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态。
没有--，就变成了“切换到另一个分支”的命令
$ git reset HEAD readme.txt ? ?# 把暂存区的修改撤销掉（unstage），重新放回工作区，工作区的修改不会丢失
Unstaged changes after reset:
M ? ? ? readme.txt
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区
7、删除文件
从版本库删除文件
$ git rm test.txt
rm 'test.txt'
$ git commit -m "remove test.txt"
[master d17efd8] remove test.txt
 1 file changed, 1 deletion(-)
 delete mode 100644 test.txt
从版本库里面恢复被误删的文件
git checkout -- test.txt ? ?# 恢复的原理与撤销修改的原理相同
四、添加远程仓库
1、创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key
$ ssh-keygen -t rsa -C "youremail@example.com"
2、登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：

点“Add Key”，你就应该看到已经添加的Key：

GitHub允许你添加多个Key
3、本地Git仓库关联Github
a. 关联远程库地址
$ git remote add origin git@github.com:michaelliao/learngit.git
远程库的名字就是origin，这是Git默认的叫法
.git/config文件里面可以设置 remote = origin (origin 可以改为其他名字)
b. 把本地库内容推送到远程库
$ git push -u origin master ? ?# 把当前分支master推送到远程
Counting objects: 19, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (19/19), done.
Writing objects: 100% (19/19), 13.73 KiB, done.
Total 23 (delta 6), reused 0 (delta 0)
To git@github.com:michaelliao/learngit.git
 * [new branch] ? ?  master -> master
Branch master set up to track remote branch master from origin.
-u参数：Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令
$ git push origin master ? ?# 只把本地master分支的最新修改推送至GitHub
4、克隆远程库
$ git clone git@github.com:michaelliao/gitskills.git #从Github上克隆了一个库到当前目录，可以克隆任意公开库
Cloning into 'gitskills'...
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (3/3), done.
Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议，但通过ssh支持的原生git协议速度最快

五、分支管理
1、创建和切换分支
$ git checkout -b dev
Switched to a new branch 'dev'
# 相当于
$ git branch dev ? ?# 创建分支
$ git checkout dev ? ?# 切换分支
Switched to branch 'dev'
2、查看分支
$ git branch
* dev ? ?# 当前分支
  master
3、合并分支
$ git merge dev ? ?# 将dev分支合并到master分支上
Updating d17efd8..fec145a
Fast-forward
 readme.txt | ? ?1 +
 1 file changed, 1 insertion(+)
这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快
4、删除分支
$ git branch -d dev
Deleted branch dev (was fec145a).
$ git branch -D dev ? ?# 强行删除分支
5、查看分支合并情况
$ git log --graph --pretty=oneline --abbrev-commit
* ? 59bc1cb conflict fixed
|\
| * 75a857c AND simple
* | 400b400 & simple
|/
* fec145a branch test
...
通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。

如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。

6、禁用Fast forward模式
$ git merge --no-ff -m "merge with no-ff" dev
Merge made by the 'recursive' strategy.
 readme.txt | ? ?1 +
 1 file changed, 1 insertion(+)
通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。

如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。

合并后查看分支历史
$ git log --graph --pretty=oneline --abbrev-commit
* ? 7825a50 merge with no-ff
|\
| * 6224937 add merge
|/
* ? 59bc1cb conflict fixed
...


7、保存工作区
$ git stash ? ?# 所有分支的工作区内容都保存到了一个stash
Saved working directory and index state WIP on dev: 6224937 add merge
HEAD is now at 6224937 add merge
$ git stash list ? ?# 保存的stash列表
stash@{0}: WIP on dev: 6224937 add merge
$ git stash pop ? ?# 恢复工作区内容并删除stash内容
# 等同于
$ git stash apply ? ?# 恢复工作区
$ git stash drop ? ?# 删除工作区
?
$ git stash apply stash@{0} ? ?# 恢复指定的stash
git stash 保存的工作现场可以被恢复到任意的分支，可以被多次恢复

六、多人协作
1、查看远程库
$ git remote
origin ? ?# 远程库的默认名称是origin
$ git remote -v
origin  git@github.com:clarkness/learngit.git (fetch) ? ?# 可以抓取的origin地址
origin  git@github.com:clarkness/learngit.git (push) ? ?# 可以推送的origin地址
2、推送分支和抓取分支
$ git push origin master ? ?# 向远程仓库推送指定分支
$ git clone git@github.com:clarkness/learngit.git ? ?# 克隆远程库，但是只有master分支
$ git checkout -b dev origin/dev ? ?# 创建远程origin的dev分支到本地
$ git pull ? ?# 把远程库最新的当前分支抓下来
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name

七、标签管理
1、创建和查看标签
$ git tag v1.0 ? ?# 将标签打在当前分支上
$ git tag ? ?# 查看标签
v1.0
$ git tag v0.9 6224937 ? ?# 给特定commit id打标签
$ git show v0.9 ? ?# 查看标签信息
$ git tag -a v0.1 -m "version 0.1 released" 3628164 ? ?# 创建带说明的标签
2、删除标签
$ git tag -d v0.1
Deleted tag 'v0.1' (was e078af9)
3、推送标签到远程库
$ git push origin v1.0 ? ?# 推送特定标签
$ git push origin --tags ? ?# 一次性推送全部尚未推送到远程的本地标签
4、删除远程库标签
$ git push origin :refs/tags/v0.9 ? ?# 先删除本地库标签
To git@github.com:michaelliao/learngit.git
 - [deleted] ? ? ? ? v0.9
























































































